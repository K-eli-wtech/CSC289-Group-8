{"ast":null,"code":"const express = require('express');\nconst dbC = require('./dbConfig');\nconst app = express();\n\n// Define a route for handling button clicks\napp.get('/button-click', async (req, res) => {\n  try {\n    // Get the game names from the query parameters\n    const {\n      game1,\n      game2,\n      game3,\n      game4,\n      game5\n    } = req.query;\n\n    // Check if the data exists in the database\n    const [result] = await dbC.pool.execute(\"Select * from Users where game1 in ('Tarkov') and game2 in ('Hogwarts Legacy') and game3 in ('Fallout 4') and game4 in ('Rust') and game5 in ('CSGO');\", [game1, game2, game3, game4, game5]);\n    const dataExists = result.length > 0;\n    console.log(`Data exists: ${dataExists}`);\n\n    // Query the database for recommended games based on the input\n    const [rows] = await dbC.pool.execute(\"SELECT * FROM Users WHERE name IN ('Tarkov', 'Hogwarts Legacy', 'Fallout 4', 'Rust', 'CSGO') AND game1 = ? AND game2 = ? AND game3 = ? AND game4 = ? AND game5 = ?\", [game1, game2, game3, game4, game5]);\n    const recommendedGames = rows.map(row => row.name);\n\n    // Send the recommended games as the response\n    res.send(`Recommended games: ${recommendedGames.join(', ')}`);\n  } catch (error) {\n    console.error(error);\n    console.log();\n    res.status(500).send('Internal server error');\n  }\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\nexport default app;","map":{"version":3,"names":["express","require","dbC","app","get","req","res","game1","game2","game3","game4","game5","query","result","pool","execute","dataExists","length","console","log","rows","recommendedGames","map","row","name","send","join","error","status","listen"],"sources":["C:/Users/Kaleb/git/Spring2023/CSC289-Group-8/arcadia/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst dbC = require('./dbConfig');\r\n\r\nconst app = express();\r\n\r\n// Define a route for handling button clicks\r\napp.get('/button-click', async (req, res) => {\r\n  try {\r\n    // Get the game names from the query parameters\r\n    const { game1, game2, game3, game4, game5 } = req.query;\r\n    \r\n    // Check if the data exists in the database\r\n    const [result] = await dbC.pool.execute(\"Select * from Users where game1 in ('Tarkov') and game2 in ('Hogwarts Legacy') and game3 in ('Fallout 4') and game4 in ('Rust') and game5 in ('CSGO');\", [game1, game2, game3, game4, game5]);\r\n    const dataExists = result.length > 0;\r\n    console.log(`Data exists: ${dataExists}`);\r\n    \r\n    // Query the database for recommended games based on the input\r\n    const [rows] = await dbC.pool.execute(\"SELECT * FROM Users WHERE name IN ('Tarkov', 'Hogwarts Legacy', 'Fallout 4', 'Rust', 'CSGO') AND game1 = ? AND game2 = ? AND game3 = ? AND game4 = ? AND game5 = ?\", [game1, game2, game3, game4, game5]);\r\n    const recommendedGames = rows.map(row => row.name);\r\n    \r\n    // Send the recommended games as the response\r\n    res.send(`Recommended games: ${recommendedGames.join(', ')}`);\r\n  } catch (error) {\r\n    console.error(error);\r\n    console.log();\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(3000, () => {\r\n  console.log('Server listening on port 3000');\r\n});\r\n\r\nexport default app;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEjC,MAAME,GAAG,GAAGH,OAAO,EAAE;;AAErB;AACAG,GAAG,CAACC,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF;IACA,MAAM;MAAEC,KAAK;MAAEC,KAAK;MAAEC,KAAK;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAGN,GAAG,CAACO,KAAK;;IAEvD;IACA,MAAM,CAACC,MAAM,CAAC,GAAG,MAAMX,GAAG,CAACY,IAAI,CAACC,OAAO,CAAC,wJAAwJ,EAAE,CAACR,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC,CAAC;IACtO,MAAMK,UAAU,GAAGH,MAAM,CAACI,MAAM,GAAG,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAE,gBAAeH,UAAW,EAAC,CAAC;;IAEzC;IACA,MAAM,CAACI,IAAI,CAAC,GAAG,MAAMlB,GAAG,CAACY,IAAI,CAACC,OAAO,CAAC,oKAAoK,EAAE,CAACR,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC,CAAC;IAChP,MAAMU,gBAAgB,GAAGD,IAAI,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;;IAElD;IACAlB,GAAG,CAACmB,IAAI,CAAE,sBAAqBJ,gBAAgB,CAACK,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;EAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAACA,KAAK,CAAC;IACpBT,OAAO,CAACC,GAAG,EAAE;IACbb,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC,uBAAuB,CAAC;EAC/C;AACF,CAAC,CAAC;;AAEF;AACAtB,GAAG,CAAC0B,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBX,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAC9C,CAAC,CAAC;AAEF,eAAehB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}