{"ast":null,"code":"// This file was modified by Oracle on September 21, 2021.\n// New connection options for additional authentication factors were\n// introduced.\n// Multi-factor authentication capability is now enabled if one of these\n// options is used.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst {\n  URL\n} = require('url');\nconst ClientConstants = require('./constants/client');\nconst Charsets = require('./constants/charsets');\nlet SSLProfiles = null;\nconst validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  enableKeepAlive: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  keepAliveInitialDelay: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  // with multi-factor authentication, the main password (used for the first\n  // authentication factor) can be provided via password1\n  password1: 1,\n  password2: 1,\n  password3: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  maxIdle: 1,\n  idleTimeout: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\nclass ConnectionConfig {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      const uriOptions = ConnectionConfig.parseUrl(options.uri);\n      for (const key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n    for (const key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, key)) continue;\n      if (validOptions[key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(`Ignoring invalid configuration option passed to Connection: ${key}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`);\n      }\n    }\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = (typeof options.port === 'string' ? parseInt(options.port, 10) : options.port) || 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    // for the purpose of multi-factor authentication, or not, the main\n    // password (used for the 1st authentication factor) can also be\n    // provided via the \"password1\" option\n    this.password = options.password || options.password1 || undefined;\n    this.password2 = options.password2 || undefined;\n    this.password3 = options.password3 || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout) ? 10 * 1000 : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n    this.enableKeepAlive = !!options.enableKeepAlive;\n    this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n    if (options.timezone && !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(`Ignoring invalid timezone passed to Connection: ${options.timezone}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`);\n      // SqlStrings falls back to UTC on invalid timezone\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl = typeof options.ssl === 'string' ? ConnectionConfig.getSSLProfile(options.ssl) : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables = options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = `+${this.timezone.slice(1)}`;\n    }\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(`SSL profile must be an object, instead it's a ${typeof this.ssl}`);\n      }\n      // Default rejectUnauthorized to true\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(ConnectionConfig.getDefaultFlags(options), options.flags || '');\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n  static mergeFlags(default_flags, user_flags) {\n    let flags = 0x0,\n      i;\n    if (!Array.isArray(user_flags)) {\n      user_flags = String(user_flags || '').toUpperCase().split(/\\s*,+\\s*/);\n    }\n    // add default flags unless \"blacklisted\"\n    for (i in default_flags) {\n      if (user_flags.indexOf(`-${default_flags[i]}`) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[default_flags[i]] || 0x0;\n    }\n    // add user flags unless already already added\n    for (i in user_flags) {\n      if (user_flags[i][0] === '-') {\n        continue;\n      }\n      if (default_flags.indexOf(user_flags[i]) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[user_flags[i]] || 0x0;\n    }\n    return flags;\n  }\n  static getDefaultFlags(options) {\n    const defaultFlags = ['LONG_PASSWORD', 'FOUND_ROWS', 'LONG_FLAG', 'CONNECT_WITH_DB', 'ODBC', 'LOCAL_FILES', 'IGNORE_SPACE', 'PROTOCOL_41', 'IGNORE_SIGPIPE', 'TRANSACTIONS', 'RESERVED', 'SECURE_CONNECTION', 'MULTI_RESULTS', 'TRANSACTIONS', 'SESSION_TRACK'];\n    if (options && options.multipleStatements) {\n      defaultFlags.push('MULTI_STATEMENTS');\n    }\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n    if (options && options.connectAttributes) {\n      defaultFlags.push('CONNECT_ATTRS');\n    }\n    return defaultFlags;\n  }\n  static getCharsetNumber(charset) {\n    const num = Charsets[charset.toUpperCase()];\n    if (num === undefined) {\n      throw new TypeError(`Unknown charset '${charset}'`);\n    }\n    return num;\n  }\n  static getSSLProfile(name) {\n    if (!SSLProfiles) {\n      SSLProfiles = require('./constants/ssl_profiles.js');\n    }\n    const ssl = SSLProfiles[name];\n    if (ssl === undefined) {\n      throw new TypeError(`Unknown SSL profile '${name}'`);\n    }\n    return ssl;\n  }\n  static parseUrl(url) {\n    const parsedUrl = new URL(url);\n    const options = {\n      host: parsedUrl.hostname,\n      port: parseInt(parsedUrl.port, 10),\n      database: parsedUrl.pathname.slice(1),\n      user: parsedUrl.username,\n      password: parsedUrl.password\n    };\n    parsedUrl.searchParams.forEach((value, key) => {\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    });\n    return options;\n  }\n}\nmodule.exports = ConnectionConfig;","map":{"version":3,"names":["URL","require","ClientConstants","Charsets","SSLProfiles","validOptions","authPlugins","authSwitchHandler","bigNumberStrings","charset","charsetNumber","compress","connectAttributes","connectTimeout","database","dateStrings","debug","decimalNumbers","enableKeepAlive","flags","host","insecureAuth","isServer","keepAliveInitialDelay","localAddress","maxPreparedStatements","multipleStatements","namedPlaceholders","nestTables","password","password1","password2","password3","passwordSha1","pool","port","queryFormat","rowsAsArray","socketPath","ssl","stream","stringifyObjects","supportBigNumbers","timezone","trace","typeCast","uri","user","connectionLimit","maxIdle","idleTimeout","Promise","queueLimit","waitForConnections","ConnectionConfig","constructor","options","parseUrl","uriOptions","key","Object","prototype","hasOwnProperty","call","console","error","parseInt","undefined","isNaN","test","getSSLProfile","slice","TypeError","rejectUnauthorized","maxPacketSize","getCharsetNumber","UTF8MB4_UNICODE_CI","clientFlags","mergeFlags","getDefaultFlags","default_flags","user_flags","i","Array","isArray","String","toUpperCase","split","indexOf","defaultFlags","push","num","name","url","parsedUrl","hostname","pathname","username","searchParams","forEach","value","JSON","parse","err","module","exports"],"sources":["C:/Users/Kaleb/git/Spring2023/CSC289-Group-8/arcadia/node_modules/mysql2/lib/connection_config.js"],"sourcesContent":["// This file was modified by Oracle on September 21, 2021.\n// New connection options for additional authentication factors were\n// introduced.\n// Multi-factor authentication capability is now enabled if one of these\n// options is used.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst { URL } = require('url');\nconst ClientConstants = require('./constants/client');\nconst Charsets = require('./constants/charsets');\nlet SSLProfiles = null;\n\nconst validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  enableKeepAlive: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  keepAliveInitialDelay: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  // with multi-factor authentication, the main password (used for the first\n  // authentication factor) can be provided via password1\n  password1: 1,\n  password2: 1,\n  password3: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  maxIdle: 1,\n  idleTimeout: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\n\nclass ConnectionConfig {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      const uriOptions = ConnectionConfig.parseUrl(options.uri);\n      for (const key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n    for (const key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, key)) continue;\n      if (validOptions[key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(\n          `Ignoring invalid configuration option passed to Connection: ${key}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n        );\n      }\n    }\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = (typeof options.port === 'string' ? parseInt(options.port, 10) : options.port)|| 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    // for the purpose of multi-factor authentication, or not, the main\n    // password (used for the 1st authentication factor) can also be\n    // provided via the \"password1\" option\n    this.password = options.password || options.password1 || undefined;\n    this.password2 = options.password2 || undefined;\n    this.password3 = options.password3 || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout)\n      ? 10 * 1000\n      : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n    this.enableKeepAlive = !!options.enableKeepAlive;\n    this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n    if (\n      options.timezone &&\n      !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)\n    ) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(\n        `Ignoring invalid timezone passed to Connection: ${options.timezone}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n      );\n      // SqlStrings falls back to UTC on invalid timezone\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl =\n      typeof options.ssl === 'string'\n        ? ConnectionConfig.getSSLProfile(options.ssl)\n        : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables =\n      options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = `+${this.timezone.slice(1)}`;\n    }\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(\n          `SSL profile must be an object, instead it's a ${typeof this.ssl}`\n        );\n      }\n      // Default rejectUnauthorized to true\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(\n      ConnectionConfig.getDefaultFlags(options),\n      options.flags || ''\n    );\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n\n  static mergeFlags(default_flags, user_flags) {\n    let flags = 0x0,\n      i;\n    if (!Array.isArray(user_flags)) {\n      user_flags = String(user_flags || '')\n        .toUpperCase()\n        .split(/\\s*,+\\s*/);\n    }\n    // add default flags unless \"blacklisted\"\n    for (i in default_flags) {\n      if (user_flags.indexOf(`-${default_flags[i]}`) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[default_flags[i]] || 0x0;\n    }\n    // add user flags unless already already added\n    for (i in user_flags) {\n      if (user_flags[i][0] === '-') {\n        continue;\n      }\n      if (default_flags.indexOf(user_flags[i]) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[user_flags[i]] || 0x0;\n    }\n    return flags;\n  }\n\n  static getDefaultFlags(options) {\n    const defaultFlags = [\n      'LONG_PASSWORD',\n      'FOUND_ROWS',\n      'LONG_FLAG',\n      'CONNECT_WITH_DB',\n      'ODBC',\n      'LOCAL_FILES',\n      'IGNORE_SPACE',\n      'PROTOCOL_41',\n      'IGNORE_SIGPIPE',\n      'TRANSACTIONS',\n      'RESERVED',\n      'SECURE_CONNECTION',\n      'MULTI_RESULTS',\n      'TRANSACTIONS',\n      'SESSION_TRACK'\n    ];\n    if (options && options.multipleStatements) {\n      defaultFlags.push('MULTI_STATEMENTS');\n    }\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n\n    if (options && options.connectAttributes) {\n      defaultFlags.push('CONNECT_ATTRS');\n    }\n    return defaultFlags;\n  }\n\n  static getCharsetNumber(charset) {\n    const num = Charsets[charset.toUpperCase()];\n    if (num === undefined) {\n      throw new TypeError(`Unknown charset '${charset}'`);\n    }\n    return num;\n  }\n\n  static getSSLProfile(name) {\n    if (!SSLProfiles) {\n      SSLProfiles = require('./constants/ssl_profiles.js');\n    }\n    const ssl = SSLProfiles[name];\n    if (ssl === undefined) {\n      throw new TypeError(`Unknown SSL profile '${name}'`);\n    }\n    return ssl;\n  }\n\n  static parseUrl(url) {\n    const parsedUrl = new URL(url);\n    const options = {\n      host: parsedUrl.hostname,\n      port: parseInt(parsedUrl.port, 10),\n      database: parsedUrl.pathname.slice(1),\n      user: parsedUrl.username,\n      password: parsedUrl.password\n    };\n    parsedUrl.searchParams.forEach((value, key) => {\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    });\n    return options;\n  }\n}\n\nmodule.exports = ConnectionConfig;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}